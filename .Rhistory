(b = etaMV - z/sqrt(N) * sqrt(fcr2))
gl <- c(-sqrt(t2_mv/t1_mv), -sqrt(t1_mv/t2_mv))
l <- function(t) {
return(-2*t[1]*sqrt(t[2]/t[1]))
}
gl <- grad(l, c(t1_mv,t2_mv))
e <- function(t){
return(sqrt(t[2]/t[1]))
}
ge <- grad(e, c(t1_mv,t2_mv))
crl <- t(gl) %*% Ixi %*% gl
cil <- c(-(sqrt(crl)* qt(0.005, n-1))/sqrt(n) + lambda_mv, -(sqrt(crl)* qt(0.995, n-1))/sqrt(n) + lambda_mv)
cil
cre <- t(ge) %*% Ixi %*% ge
cie <- c(-(sqrt(cre)* qt(0.005, n-1))/sqrt(n) + eta_mv, -(sqrt(cre)* qt(0.995, n-1))/sqrt(n) + eta_mv)
cie
a <- 0.8
b <- 1.8
alpha <- 4.74
beta <- 0.29
f <- function(t) {
lambda <- t[1]
eta <- t[2]
B <- besselK(lambda, b+1, expon.scaled = T) / besselK(lambda, b, expon.scaled = T)
first <- B*eta - alpha
second <- -(2*b)/(lambda*eta) + B*(1/eta) - beta
return(c(first, second))
}
library(rootSolve)
sols <- multiroot(f = f, start = c(1,2), positive = T)
lambda <- sols$root[1]
eta <- sols$root[2]
lambda
eta
t1 <- -lambda/(2*eta)
t2 <- -(lambda*eta)/2
t1
t2
log(2) + (b/2)*log(t2/t1) + log(besselK(-2*t1*(t2/t1)^(1/2), b, expon.scaled = T))
library(numDeriv)
g <- function(t) {
tt <- t[1]
ttt <- t[2]
B <- log(2) + b*log(sqrt(ttt/tt)) + log(besselK(-2*tt*sqrt(ttt/tt), b))
return(B)
}
H <- hessian(g, c(t1,t2))
H
xbar <- 4.622995
xbarinv <- 0.282837
f_mv <- function(t) {
lambda <- t[1]
eta <- t[2]
B <- besselK(lambda, b+1, expon.scaled = T) / besselK(lambda, b, expon.scaled = T)
first <- B*eta - xbar
second <- -(2*b)/(lambda*eta) + B*(1/eta) - xbarinv
return(c(first, second))
}
sols2 <- multiroot(f = f_mv, start = c(1,2), positive = T)
lambda_mv <- sols2$root[1]
eta_mv <- sols2$root[2]
lambda_mv
eta_mv
n <- 96
t1_mv <- -lambda_mv/(2*eta_mv)
t2_mv <- -(lambda_mv*eta_mv)/2
t1_mv
t2_mv
H_mv <- hessian(g, c(t1_mv, t2_mv))
H_mv
Ix <- n*H_mv
Ix
I <- diag(1,2)
gr1 <- c(H_mv[1,1], H_mv[1,2])
gr1T <- t(gr1)
Ixi <- solve(Ix, I)
fcr1 <- gr1T %*% Ixi %*% gr1
fcr1
gr2 <- c(H_mv[2,1], H_mv[2,2])
gr2T <- t(gr2)
fcr2 <- gr2T %*% Ixi %*% gr2
fcr2
gl <- c(-sqrt(t2_mv/t1_mv), -sqrt(t1_mv/t2_mv))
l <- function(t) {
return(-2*t[1]*sqrt(t[2]/t[1]))
}
gl <- grad(l, c(t1_mv,t2_mv))
e <- function(t){
return(sqrt(t[2]/t[1]))
}
ge <- grad(e, c(t1_mv,t2_mv))
crl <- t(gl) %*% Ixi %*% gl
cil <- c(-(sqrt(crl)* qt(0.005, n-1))/sqrt(n) + lambda_mv, -(sqrt(crl)* qt(0.995, n-1))/sqrt(n) + lambda_mv)
cil
cre <- t(ge) %*% Ixi %*% ge
cie <- c(-(sqrt(cre)* qt(0.005, n-1))/sqrt(n) + eta_mv, -(sqrt(cre)* qt(0.995, n-1))/sqrt(n) + eta_mv)
cie
x <- prof_rows[1]
x <- prof_row[1]
X <- read.table("cmc.dat", header = T, sep = ",")
head(X)
sum(is.na(X))
for (k in c(1:ncol(X))) {
print(colnames(X)[k])
print(range(X[,k]))
}
hist(X$Childs)
n <- nrow(X)
Methodc <- rep(NA,n)
Methodc[X$Method == 1] <- "none"
Methodc[X$Method == 2] <- "long"
Methodc[X$Method == 3] <- "short"
Methodc <- factor(Methodc)
X$Methodc <- Methodc
WifeEducC <- rep(NA,n)
WifeEducC[X$WifeEduc == 1] <- "low"
WifeEducC[X$WifeEduc == 2] <- "notsolow"
WifeEducC[X$WifeEduc == 3] <- "medium"
WifeEducC[X$WifeEduc == 4] <- "high"
WifeEducC <- factor(WifeEducC)
X$WifeEducC <- WifeEducC
head(X)
table <- table(X$Methodc, X$WifeEducC)
table
n <- sum(table)
p_table <- table / n
p_table
chisq.test(X$Methodc, X$WifeEducC)
row_masses <- rowSums(p_table)
col_masses <- colSums(p_table)
row_masses
col_masses
prof_rows <- matrix(nrow = nrow(table), ncol = ncol(table), dimnames = list(rownames(table),colnames(table)))
for (i in 1:nrow(table)) {
prof_rows[i,] <- c(p_table[i,])/row_masses[i]
}
prof_rows
rowSums(prof_rows)
prof_cols <- matrix(nrow = ncol(table), ncol = nrow(table), dimnames = list(colnames(table),rownames(table)))
for (i in 1:ncol(table)) {
prof_cols[i,] <- c(p_table[,i])/col_masses[i]
}
prof_cols
rowSums(prof_cols)
marginal_prof <- colSums(prof_rows)/nrow(prof_rows)
marginal_prof
sum(marginal_prof)
library(ca)
ca.out <- ca(table)
ca.out
plot(ca.out, map ="rowprincipal")
x <- prof_row[1]
x <- prof_rows[1]
dist(x, marginal_prof, method = "euclidean")
x <- prof_rows[1]
dist(x, marginal_prof, method = "euclidean")
x <- prof_rows[1]
print
dist(x, marginal_prof, method = "euclidean")
x <- as.matrix(prof_rows)[1]
print(x)
dist(x, marginal_prof, method = "euclidean")
x <- as.matrix(prof_rows)[1,:]
x <- as.matrix(prof_rows)[1,]
print(x)
dist(x, marginal_prof, method = "euclidean")
x <- as.matrix(prof_rows)[1,]
print(x)
x - marginal_prof
x <- as.matrix(prof_rows)[1,]
print(x)
sum((x - marginal_prof)^2)
c <- c()
for (i in 1:4) {
x <- as.matrix(prof_rows)[i,]
c[i] <- sum((x - marginal_prof)^2)
}
c <- c()
for (i in 0:3) {
x <- as.matrix(prof_rows)[i,]
c[i] <- sum((x - marginal_prof)^2)
}
c
c <- c()
for (i in 0:4) {
x <- as.matrix(prof_rows)[i,]
c[i] <- sum((x - marginal_prof)^2)
}
c <- c()
for (i in 0:3) {
x <- as.matrix(prof_rows)[i,]
c[i] <- sum((x - marginal_prof)^2)
}
c
c <- c(colnames(prof_rows$rownames))
c <- c(colnames(prof_rows.rownames))
c <- c(colnames(rownames(prof_rows)))
for (i in 0:3) {
x <- as.matrix(prof_rows)[i,]
c[i] <- sum((x - marginal_prof)^2)
}
c
p2 <- predict(modNNCV, newdata=X[-training,], type="raw")
library(MASS)
dd <- read.csv('data.csv')
head(dd)
dd$PatientId <- factor(dd$PatientId)
dd$X <- NULL
colnames(dd)
head(dd)
n <- nrow(dd)
ddNoShow <- dd[which(dd$No.show == 'NoShow'),]
ddShow <- dd[which(dd$No.show == 'Show'),]
nrow(ddNoShow)/n
nrow(ddShow)/n
pt <- table(dd$Scholarship, dd$No.show)/n
row_masses <- rowSums(pt)
pr_Scholar <- matrix(nrow = nrow(pt), ncol = ncol(pt), dimnames = list(rownames(pt),colnames(pt)))
for (i in 1:nrow(pt)) {
pr_Scholar[i,] <- c(pt[i,])/row_masses[i]
}
pr_Scholar
chisq.test(pt*n)
ptr <- table(dd$Hipertension, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_Hipertension <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_Hipertension[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_Hipertension
chisq.test(ptr*n)
ptr <- table(dd$Diabetes, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_Diabetes <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_Diabetes[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_Diabetes
chisq.test(ptr*n)
ptr <- table(dd$Alcoholism, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_Alcoholism <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_Alcoholism[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_Alcoholism
chisq.test(ptr*n)
ptr <- table(dd$SMS_received, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_SMS <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_SMS[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_SMS
chisq.test(ptr*n)
ptr <- table(dd$Handcap, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_Handcap <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_Handcap[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_Handcap
chisq.test(ptr*n)
mean(ddNoShow$DateDiff)
mean(ddShow$DateDiff)
ptr <- table(dd$AgeI, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_Age <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_Age[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_Age
ptr <- table(dd$Gender, dd$No.show)/n
row_massesr <- rowSums(ptr)
pr_Gender <- matrix(nrow = nrow(ptr), ncol = ncol(ptr), dimnames = list(rownames(ptr),colnames(ptr)))
for (i in 1:nrow(ptr)) {
pr_Gender[i,] <- c(ptr[i,])/row_massesr[i]
}
pr_Gender
chisq.test(ptr*n)
training <- sample(1:n, round(2*n/3))
ntraining <- length(training)
ntest <- n - ntraining
X <- dd[,c(5:12, 21)]
head(X)
library(klaR)
library(caret)
library(e1071)
modNB <- naiveBayes(No.show ~ ., data = X[training,])
modNB
modNBCV <- train(X[training,-7], X[training,]$No.show, 'nb', trControl = trainControl(method = "cv", number = 10))
trc <- trainControl (method="cv", number=10)
modNNCV <- train (No.show ~., data = X, subset=training, method='nnet', maxit = 500, trace = FALSE, tuneGrid =expand.grid(.size=2,.decay=0.01), trControl=trc)
p2 <- predict(modNNCV, newdata=X[-training,], type="raw")
length(X[-training,]$No.show)
t2 <- table(Truth=X[-training,]$No.show, Pred=p2)
t2
(error_rate.test <- 100*(1-sum(diag(t2))/ntest))
p2 <- predict(modNNCV, newdata=X[training,], type="raw")
t2 <- table(Truth=X[training,]$No.show, Pred=p2)
t2
(error_rate.test <- 100*(sum(diag(t2))/ntraining))
(error_rate.test <- 100*(1-sum(diag(t2))/ntraining))
p2 <- predict(modNNCV, newdata=X[-training,], type="raw")
length(X[-training,]$No.show)
t2 <- table(Truth=X[-training,]$No.show, Pred=p2)
t2
(error_rate.test <- 100*(sum(diag(t2))/ntest))
(error_rate.test <- 100*(1-sum(diag(t2))/ntest))
install.packages("png")
library(png)
library(grid)
img <- readPNG("patientsid.png"")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("patientsid.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("corr.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("patientsid.png")
grid.raster(img)
library(png)
library(grid)
img2 <- readPNG("corr.png")
grid.raster(img2)
setwd("~/Google Drive/UNI/3r CURS/2n QUATRIMESTRE/ANÀLISI DE DADES/PROJECTE/wine-quality-ad")
X <- read.csv2("winequality-red.csv")
X <- read.csv2("winequality-red.csv")
setwd("~/Google Drive/UNI/3r CURS/2n QUATRIMESTRE/ANÀLISI DE DADES/PROJECTE/wine-quality-ad/data")
X <- read.csv2("winequality-red.csv")
setwd("~/Google Drive/UNI/3r CURS/2n QUATRIMESTRE/ANÀLISI DE DADES/PROJECTE/wine-quality-ad/data")
X <- read.csv2("winequality-red.csv")
setwd("~/Google Drive/UNI/3r CURS/2n QUATRIMESTRE/ANÀLISI DE DADES/PROJECTE/wine-quality-ad")
X <- read.csv2("./data/winequality-red.csv")
summary(X[,-12])
par(mfrow=c(2,4))
boxplot(X[,5], main = "chlorides")
a <- which(X$chlorides > 0.15 | X$chlorides < 0.02)
boxplot(X[,4], main = "residual.sugar")
b <- which(X$residual.sugar > 5 | X$residual.sugar < 1)
boxplot(X[,7], main = "total.sulfur.dioxide")
c <- which(X$total.sulfur.dioxide > 150)
boxplot(X[,10], main = "sulphates")
d <- which(X$sulphates > 1.2)
outliers <- union(union(union(a,b),c),d)
cat("Total outliers = ")
length(outliers)
cat("% Outliers = ")
length(outliers)/1599 * 100
X <- X[-outliers,]
par(mfrow=c(2,4))
boxplot(X[,5], main = "chlorides")
boxplot(X[,4], main = "residual.sugar")
boxplot(X[,7], main = "total.sulfur.dioxide")
boxplot(X[,10], main = "sulphates")
db <- X[,-12]
cor(db)
length(which(abs(cor(db)) > 0.3)) - 11
library(car)
library(FactoMineR)
library(ade4)
scatterplotMatrix(db)
pca.out <- princomp(db, cor = T)
summary(pca.out)
biplot(pca.out, xlabs = rep(".", nrow(db), col = "black"))
screeplot(pca.out)
Xs <- scale(db)
summary(Xs)
Xs <- scale(db)
summary(Xs)
D <- dist(Xsn, method = "euclidean")
Xs <- scale(db)
summary(Xs)
D <- dist(Xs, method = "euclidean")
summary(D)
Xs <- scale(db)
summary(Xs)
D <- dist(Xs, method = "euclidean")
D
Xs <- scale(db)
summary(Xs)
D <- dist(Xs, method = "euclidean")
max(D)
min(D)
Xs <- scale(db)
summary(Xs)
D <- dist(Xs, method = "euclidean")
max(D)
min(which(D > 0))
Xs <- scale(db)
summary(Xs)
D <- dist(Xs, method = "euclidean")
max(D)
which(D > 0)
Xs <- scale(db)
summary(Xs)
D <- dist(Xs, method = "euclidean")
max(D)
Xs <- scale(db)
D <- dist(Xs, method = "euclidean")
Xs <- scale(db)
D <- dist(Xs, method = "euclidean")
par(cfrow=c(2,2))
closest.neigh <- hclust(D, method = "single")
plot(closest.neigh, main="Single linkage")
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage")
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage")
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage")
par(mfrow=c(2,2))
closest.neigh <- hclust(D, method = "single")
plot(closest.neigh, main="Single linkage")
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage")
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage")
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage")
par(mfrow=c(2,2))
closest.neigh <- hclust(D, method = "single")
plot(closest.neigh, main="Single linkage")
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage")
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage")
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage")
par(mfrow=c(2,2))
closest.neigh <- hclust(D, method = "single")
plot(closest.neigh, main="Single linkage", col = X$quality)
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage")
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage")
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage")
par(mfrow=c(2,2))
closest.neigh <- hclust(D, method = "single")
plot(closest.neigh, main="Single linkage", col = X$quality)
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage",  col = X$quality)
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage", col = X$quality)
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage", col = X$quality)
par(mfrow=c(2,2))
closest.neigh <- hclust(D, method = "single")
plot(closest.neigh, main="Single linkage", col.axis = X$quality)
par(mfrow=c(2,2))
names <- X[,ncol(X)]
closest.neigh <- as.dendrogram(hclust(D, method = "single"))
labels(closest.neigh) <- apply(X[,ncol(X)], 1, paste, collapse = "_")[order.dendrogram(closest.neigh)]
X <- read.csv2("./data/winequality-red.csv")
summary(X[,-13])
Xid <- read.csv2("./data/winequality-red.csv")
X <- Xid[,-1]
summary(X[,-12])
par(mfrow=c(2,2))
names <- X[,ncol(X)]
closest.neigh <- as.dendrogram(hclust(D, method = "single"))
labels(closest.neigh) <- apply(Xid[,c(1,ncol(X))], 1, paste, collapse = "_")[order.dendrogram(closest.neigh)]
install.packages("dendextend")
library(dendextend)
par(mfrow=c(2,2))
names <- X[,ncol(X)]
closest.neigh <- as.dendrogram(hclust(D, method = "single"))
labels(closest.neigh) <- apply(Xid[,c(1,ncol(X))], 1, paste, collapse = "_")[order.dendrogram(closest.neigh)]
closest.neigh <- set(closest.neigh, "labels_cex", 0.6)
plot(closest.neigh, main="Single linkage", col = X$quality)
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage",  col = X$quality)
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage", col = X$quality)
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage", col = X$quality)
library(dendextend)
#par(mfrow=c(2,2))
names <- X[,ncol(X)]
closest.neigh <- as.dendrogram(hclust(D, method = "single"))
labels(closest.neigh) <- apply(Xid[,c(1,ncol(X))], 1, paste, collapse = "_")[order.dendrogram(closest.neigh)]
closest.neigh <- set(closest.neigh, "labels_cex", 0.6)
plot(closest.neigh, main="Single linkage", horiz = T)
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage",  col = X$quality)
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage", col = X$quality)
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage", col = X$quality)
library(dendextend)
library(zoom)
#par(mfrow=c(2,2))
names <- X[,ncol(X)]
closest.neigh <- as.dendrogram(hclust(D, method = "single"))
labels(closest.neigh) <- apply(Xid[,c(1,ncol(X))], 1, paste, collapse = "_")[order.dendrogram(closest.neigh)]
closest.neigh <- set(closest.neigh, "labels_cex", 0.6)
plot(closest.neigh, main="Single linkage", horiz = T)
zm()
farthest.neigh <- hclust(D, method = "complete")
plot(farthest.neigh, main="Complete linkage",  col = X$quality)
average.neigh <- hclust(D, method = "average")
plot(average.neigh, main="Average linkage", col = X$quality)
ward.neigh <- hclust(D, method = "ward.D2")
plot(ward.neigh, main="Ward's linkage", col = X$quality)
Xs <- scale(db)
D <- dist(Xs, method = "euclidean")
